# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'ui.ui'
#
# Created by: PyQt5 UI code generator 5.15.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from math import *
import matplotlib.pyplot as plt
from numpy import arange
from mpl_toolkits.mplot3d import Axes3D


def runge_kutta_2d(x0, y0, t0, t, h, dx_expr, dy_expr):
    n = int(abs(t - t0) / h)
    if t < t0:
        h *= -1  # !!!
    x_n = x0
    y_n = y0
    t_n = t0
    for i in range(1, n + 1):
        k1 = h * dxdt_2d(x_n, y_n, t_n, dx_expr)
        m1 = h * dydt_2d(x_n, y_n, t_n, dy_expr)

        k2 = h * dxdt_2d(x_n + k1 / 2, y_n + m1 / 2, t_n + h / 2, dx_expr)
        m2 = h * dydt_2d(x_n + k1 / 2, y_n + m1 / 2, t_n + h / 2, dy_expr)

        k3 = h * dxdt_2d(x_n + k2 / 2, y_n + m2 / 2, t_n + h / 2, dx_expr)
        m3 = h * dydt_2d(x_n + k2 / 2, y_n + m2 / 2, t_n + h / 2, dy_expr)

        k4 = h * dxdt_2d(x_n + k3, y_n + m3, t_n + h, dx_expr)
        m4 = h * dydt_2d(x_n + k3, y_n + m3, t_n + h, dx_expr)

        x_n = x_n + (k1 + 2 * k2 + 2 * k3 + k4) / 6
        y_n = y_n + (m1 + 2 * m2 + 2 * m3 + m4) / 6

        t_n += h
    return x_n, y_n


def phase_trajectory_2d(koshi_x0, koshi_y0, koshi_t0, runge_h, min_t, max_t, plot_step, dx_expr, dy_expr, ax):
    # must return or plot [x], [y]
    x = []
    y = []
    for t in arange(min_t, max_t, plot_step):
        rk_res = runge_kutta_2d(
            koshi_x0, koshi_y0, koshi_t0, t, runge_h, dx_expr, dy_expr)
        # print(rk_res)
        x.append(rk_res[0])
        y.append(rk_res[1])
    # fig = plt.figure()
    # ax = fig.add_subplot(1, 1, 1)
    ax.plot(x, y)


def phase_portrait_2d(offset_x, offset_y, koshi_x0, koshi_y0, koshi_t0, runge_h, min_t, max_t, plot_step, dx_expr, dy_expr):
    fig = plt.figure(1)
    ax = fig.add_subplot(1, 1, 1)
    ax.grid(True, which='both')
    ax.set_ylim(-100, 100)
    ax.set_xlim(-100, 100)
    ax.spines['left'].set_position('center')
    ax.spines['bottom'].set_position('center')
    ax.spines['top'].set_visible(False)
    ax.spines['right'].set_visible(False)

    x_up = koshi_x0 + 2 * offset_x
    y_up = koshi_y0

    x_down = koshi_x0
    y_down = koshi_y0 - 2 * offset_y

    x_left = koshi_x0 - offset_x
    y_left = koshi_y0 + offset_y

    x_right = koshi_x0 + offset_x
    y_right = koshi_y0 + offset_y

    phase_trajectory_2d(x_up, y_up, koshi_t0, runge_h, min_t,
                        max_t, plot_step, dx_expr, dy_expr, ax)
    phase_trajectory_2d(x_down, y_down, koshi_t0, runge_h,
                        min_t, max_t, plot_step, dx_expr, dy_expr, ax)
    phase_trajectory_2d(x_left, y_left, koshi_t0, runge_h,
                        min_t, max_t, plot_step, dx_expr, dy_expr, ax)
    phase_trajectory_2d(x_right, y_right, koshi_t0, runge_h,
                        min_t, max_t, plot_step, dx_expr, dy_expr, ax)
    plt.show()


def runge_kutta_3d(x0, y0, z0, t0, t, h, dx_expr, dy_expr, dz_expr):
    n = int(abs(t - t0) / h)
    if t < t0:
        h *= -1  # !!!
    x_n = x0
    y_n = y0
    z_n = z0
    t_n = t0
    for i in range(1, n + 1):
        k1 = h * dxdt_3d(x_n, y_n, z_n, t_n, dx_expr)
        m1 = h * dydt_3d(x_n, y_n, z_n, t_n, dy_expr)
        p1 = h * dzdt_3d(x_n, y_n, z_n, t_n, dz_expr)

        k2 = h * dxdt_3d(x_n + k1 / 2, y_n + m1 / 2, z_n +
                         p1 / 2, t_n + h / 2, dx_expr)
        m2 = h * dydt_3d(x_n + k1 / 2, y_n + m1 / 2, z_n +
                         p1 / 2, t_n + h / 2, dy_expr)
        p2 = h * dzdt_3d(x_n + k1 / 2, y_n + m1 / 2, z_n +
                         p1 / 2, t_n + h / 2, dz_expr)

        k3 = h * dxdt_3d(x_n + k2 / 2, y_n + m2 / 2, z_n +
                         p2 / 2, t_n + h / 2, dx_expr)
        m3 = h * dydt_3d(x_n + k2 / 2, y_n + m2 / 2, z_n +
                         p2 / 2, t_n + h / 2, dy_expr)
        p3 = h * dzdt_3d(x_n + k2 / 2, y_n + m2 / 2, z_n +
                         p2 / 2, t_n + h / 2, dz_expr)

        k4 = h * dxdt_3d(x_n + k3, y_n + m3, z_n + p3, t_n + h, dx_expr)
        m4 = h * dydt_3d(x_n + k3, y_n + m3, z_n + p3, t_n + h, dy_expr)
        p4 = h * dzdt_3d(x_n + k3, y_n + m3, z_n + p3, t_n + h, dz_expr)

        x_n = x_n + (k1 + 2 * k2 + 2 * k3 + k4) / 6
        y_n = y_n + (m1 + 2 * m2 + 2 * m3 + m4) / 6
        z_n = z_n + (p1 + 2 * p2 + 2 * p3 + p4) / 6

        t_n += h
    return x_n, y_n, z_n


def phase_trajectory_3d(koshi_x0, koshi_y0, koshi_z0, koshi_t0, runge_h, min_t, max_t, plot_step, dx_expr, dy_expr, dz_expr, ax):
    # must return or plot [x], [y], [z]
    x = []
    y = []
    z = []
    for t in arange(min_t, max_t, plot_step):
        rk_res = runge_kutta_3d(
            koshi_x0, koshi_y0, koshi_z0, koshi_t0, t, runge_h, dx_expr, dy_expr, dz_expr)
        # print(rk_res)
        x.append(rk_res[0])
        y.append(rk_res[1])
        z.append(rk_res[2])
    # fig = plt.figure()
    # ax = fig.add_subplot(111, projection='3d')
    ax.plot(x, y, z)


def phase_portrait_3d(offset_x, offset_y, offset_z, koshi_x0, koshi_y0, koshi_z0, koshi_t0, runge_h, min_t, max_t, plot_step, dx_expr, dy_expr, dz_expr):
    fig = plt.figure()
    ax = fig.add_subplot(111, projection='3d')
    x1 = koshi_x0
    y1 = koshi_y0
    z1 = koshi_z0 + offset_z

    x2 = koshi_x0
    y2 = koshi_y0
    z2 = koshi_z0 - offset_z

    x3 = koshi_x0 + offset_x
    y3 = koshi_y0
    z3 = koshi_z0

    x4 = koshi_x0 - offset_x
    y4 = koshi_y0
    z4 = koshi_z0

    x5 = koshi_x0
    y5 = koshi_y0 + offset_y
    z5 = koshi_z0

    x6 = koshi_x0
    y6 = koshi_y0 - offset_y
    z6 = koshi_z0

    phase_trajectory_3d(x1, y1, z1, koshi_t0, runge_h, min_t,
                        max_t, plot_step, dx_expr, dy_expr, dz_expr, ax)
    phase_trajectory_3d(x2, y2, z2, koshi_t0, runge_h, min_t,
                        max_t, plot_step, dx_expr, dy_expr, dz_expr, ax)
    phase_trajectory_3d(x3, y3, z3, koshi_t0, runge_h, min_t,
                        max_t, plot_step, dx_expr, dy_expr, dz_expr, ax)
    phase_trajectory_3d(x4, y4, z4, koshi_t0, runge_h, min_t,
                        max_t, plot_step, dx_expr, dy_expr, dz_expr, ax)
    phase_trajectory_3d(x5, y5, z5, koshi_t0, runge_h, min_t,
                        max_t, plot_step, dx_expr, dy_expr, dz_expr, ax)
    phase_trajectory_3d(x6, y6, z6, koshi_t0, runge_h, min_t,
                        max_t, plot_step, dx_expr, dy_expr, dz_expr, ax)
    plt.show()


def dxdt_2d(x, y, t, dx_expr):
    return eval(dx_expr)


def dydt_2d(x, y, t, dy_expr):
    return eval(dy_expr)


def dxdt_3d(x, y, z, t, dx_expr):
    return eval(dx_expr)


def dydt_3d(x, y, z, t, dy_expr):
    return eval(dy_expr)


def dzdt_3d(x, y, z, t, dz_expr):
    return eval(dz_expr)


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(336, 480)
        MainWindow.setMinimumSize(QtCore.QSize(336, 480))
        MainWindow.setMaximumSize(QtCore.QSize(336, 480))
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap("favicon.ico"),
                       QtGui.QIcon.Normal, QtGui.QIcon.Off)
        MainWindow.setWindowIcon(icon)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.btn_start = QtWidgets.QPushButton(self.centralwidget)
        self.btn_start.setGeometry(QtCore.QRect(220, 340, 101, 41))
        self.btn_start.setObjectName("btn_start")
        self.groupBox_eq_count = QtWidgets.QGroupBox(self.centralwidget)
        self.groupBox_eq_count.setGeometry(QtCore.QRect(20, 10, 131, 111))
        self.groupBox_eq_count.setObjectName("groupBox_eq_count")
        self.radioButton_two_eq = QtWidgets.QRadioButton(
            self.groupBox_eq_count)
        self.radioButton_two_eq.setGeometry(QtCore.QRect(20, 20, 81, 21))
        self.radioButton_two_eq.setObjectName("radioButton_two_eq")
        self.radioButton_three_eq = QtWidgets.QRadioButton(
            self.groupBox_eq_count)
        self.radioButton_three_eq.setGeometry(QtCore.QRect(20, 60, 82, 17))
        self.radioButton_three_eq.setObjectName("radioButton_three_eq")
        self.groupBox = QtWidgets.QGroupBox(self.centralwidget)
        self.groupBox.setGeometry(QtCore.QRect(20, 130, 301, 131))
        self.groupBox.setObjectName("groupBox")
        self.inp_dxdt = QtWidgets.QLineEdit(self.groupBox)
        self.inp_dxdt.setGeometry(QtCore.QRect(40, 20, 251, 20))
        self.inp_dxdt.setObjectName("inp_dxdt")
        self.label = QtWidgets.QLabel(self.groupBox)
        self.label.setGeometry(QtCore.QRect(10, 10, 31, 31))
        self.label.setObjectName("label")
        self.label_2 = QtWidgets.QLabel(self.groupBox)
        self.label_2.setGeometry(QtCore.QRect(10, 50, 31, 31))
        self.label_2.setObjectName("label_2")
        self.inp_dydt = QtWidgets.QLineEdit(self.groupBox)
        self.inp_dydt.setGeometry(QtCore.QRect(40, 60, 251, 20))
        self.inp_dydt.setObjectName("inp_dydt")
        self.label_3 = QtWidgets.QLabel(self.groupBox)
        self.label_3.setGeometry(QtCore.QRect(10, 100, 31, 21))
        self.label_3.setObjectName("label_3")
        self.inp_dzdt = QtWidgets.QLineEdit(self.groupBox)
        self.inp_dzdt.setGeometry(QtCore.QRect(40, 100, 251, 20))
        self.inp_dzdt.setObjectName("inp_dzdt")
        self.groupBox_start_cond = QtWidgets.QGroupBox(self.centralwidget)
        self.groupBox_start_cond.setGeometry(QtCore.QRect(200, 10, 121, 111))
        self.groupBox_start_cond.setObjectName("groupBox_start_cond")
        self.label_4 = QtWidgets.QLabel(self.groupBox_start_cond)
        self.label_4.setGeometry(QtCore.QRect(10, 20, 21, 21))
        self.label_4.setObjectName("label_4")
        self.inp_t0 = QtWidgets.QLineEdit(self.groupBox_start_cond)
        self.inp_t0.setGeometry(QtCore.QRect(40, 20, 61, 20))
        self.inp_t0.setObjectName("inp_t0")
        self.label_5 = QtWidgets.QLabel(self.groupBox_start_cond)
        self.label_5.setGeometry(QtCore.QRect(10, 40, 31, 16))
        self.label_5.setObjectName("label_5")
        self.inp_x0 = QtWidgets.QLineEdit(self.groupBox_start_cond)
        self.inp_x0.setGeometry(QtCore.QRect(40, 40, 61, 20))
        self.inp_x0.setObjectName("inp_x0")
        self.label_6 = QtWidgets.QLabel(self.groupBox_start_cond)
        self.label_6.setGeometry(QtCore.QRect(10, 60, 31, 16))
        self.label_6.setObjectName("label_6")
        self.inp_y0 = QtWidgets.QLineEdit(self.groupBox_start_cond)
        self.inp_y0.setGeometry(QtCore.QRect(40, 60, 61, 20))
        self.inp_y0.setObjectName("inp_y0")
        self.inp_z0 = QtWidgets.QLineEdit(self.groupBox_start_cond)
        self.inp_z0.setGeometry(QtCore.QRect(40, 80, 61, 20))
        self.inp_z0.setObjectName("inp_z0")
        self.label_7 = QtWidgets.QLabel(self.groupBox_start_cond)
        self.label_7.setGeometry(QtCore.QRect(10, 80, 31, 16))
        self.label_7.setObjectName("label_7")
        self.groupBox_2 = QtWidgets.QGroupBox(self.centralwidget)
        self.groupBox_2.setGeometry(QtCore.QRect(20, 270, 191, 171))
        self.groupBox_2.setObjectName("groupBox_2")
        self.label_8 = QtWidgets.QLabel(self.groupBox_2)
        self.label_8.setGeometry(QtCore.QRect(10, 20, 71, 16))
        self.label_8.setObjectName("label_8")
        self.label_9 = QtWidgets.QLabel(self.groupBox_2)
        self.label_9.setGeometry(QtCore.QRect(10, 40, 71, 16))
        self.label_9.setObjectName("label_9")
        self.label_10 = QtWidgets.QLabel(self.groupBox_2)
        self.label_10.setGeometry(QtCore.QRect(10, 60, 47, 13))
        self.label_10.setObjectName("label_10")
        self.label_11 = QtWidgets.QLabel(self.groupBox_2)
        self.label_11.setGeometry(QtCore.QRect(10, 80, 47, 13))
        self.label_11.setObjectName("label_11")
        self.inp_ruge_step = QtWidgets.QLineEdit(self.groupBox_2)
        self.inp_ruge_step.setGeometry(QtCore.QRect(90, 20, 71, 20))
        self.inp_ruge_step.setObjectName("inp_ruge_step")
        self.inp_plot_step = QtWidgets.QLineEdit(self.groupBox_2)
        self.inp_plot_step.setGeometry(QtCore.QRect(90, 40, 71, 20))
        self.inp_plot_step.setObjectName("inp_plot_step")
        self.inp_min_t = QtWidgets.QLineEdit(self.groupBox_2)
        self.inp_min_t.setGeometry(QtCore.QRect(90, 60, 71, 20))
        self.inp_min_t.setObjectName("inp_min_t")
        self.inp_max_t = QtWidgets.QLineEdit(self.groupBox_2)
        self.inp_max_t.setGeometry(QtCore.QRect(90, 80, 71, 20))
        self.inp_max_t.setObjectName("inp_max_t")
        self.label_12 = QtWidgets.QLabel(self.groupBox_2)
        self.label_12.setGeometry(QtCore.QRect(10, 100, 51, 16))
        self.label_12.setObjectName("label_12")
        self.label_13 = QtWidgets.QLabel(self.groupBox_2)
        self.label_13.setGeometry(QtCore.QRect(10, 120, 47, 13))
        self.label_13.setObjectName("label_13")
        self.label_14 = QtWidgets.QLabel(self.groupBox_2)
        self.label_14.setGeometry(QtCore.QRect(10, 140, 47, 13))
        self.label_14.setObjectName("label_14")
        self.inp_offset_x = QtWidgets.QLineEdit(self.groupBox_2)
        self.inp_offset_x.setGeometry(QtCore.QRect(90, 100, 71, 20))
        self.inp_offset_x.setObjectName("inp_offset_x")
        self.inp_offset_y = QtWidgets.QLineEdit(self.groupBox_2)
        self.inp_offset_y.setGeometry(QtCore.QRect(90, 120, 71, 20))
        self.inp_offset_y.setObjectName("inp_offset_y")
        self.inp_offset_z = QtWidgets.QLineEdit(self.groupBox_2)
        self.inp_offset_z.setGeometry(QtCore.QRect(90, 140, 71, 20))
        self.inp_offset_z.setObjectName("inp_offset_z")
        self.btn_traject = QtWidgets.QPushButton(self.centralwidget)
        self.btn_traject.setGeometry(QtCore.QRect(220, 290, 101, 41))
        self.btn_traject.setObjectName("btn_traject")
        self.btn_exit = QtWidgets.QPushButton(self.centralwidget)
        self.btn_exit.setGeometry(QtCore.QRect(220, 390, 101, 41))
        self.btn_exit.setObjectName("btn_exit")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 336, 21))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "RungeKutta4th"))
        self.btn_start.setText(_translate("MainWindow", "Портрет"))
        self.groupBox_eq_count.setTitle(
            _translate("MainWindow", "Количество уравнений"))
        self.radioButton_two_eq.setText(
            _translate("MainWindow", "2 уравнения"))
        self.radioButton_three_eq.setText(
            _translate("MainWindow", "3 уравнения"))
        self.groupBox.setTitle(_translate("MainWindow", "Система уравнений"))
        self.label.setText(_translate("MainWindow", "dx/dt"))
        self.label_2.setText(_translate("MainWindow", "dy/dt"))
        self.label_3.setText(_translate("MainWindow", "dz/dt"))
        self.groupBox_start_cond.setTitle(
            _translate("MainWindow", "Начальные условия"))
        self.label_4.setText(_translate("MainWindow", "t0"))
        self.label_5.setText(_translate("MainWindow", "x(t0)"))
        self.label_6.setText(_translate("MainWindow", "y(t0)"))
        self.label_7.setText(_translate("MainWindow", "z(t0)"))
        self.groupBox_2.setTitle(_translate("MainWindow", "Настройки"))
        self.label_8.setText(_translate("MainWindow", "шаг метода"))
        self.label_9.setText(_translate("MainWindow", "шаг графика"))
        self.label_10.setText(_translate("MainWindow", "мин t"))
        self.label_11.setText(_translate("MainWindow", "макс t"))
        self.btn_traject.setText(_translate("MainWindow", "Траектория"))
        self.btn_exit.setText(_translate("MainWindow", "Выход"))
        self.label_12.setText(_translate("MainWindow", "отступ x"))
        self.label_13.setText(_translate("MainWindow", "отступ y"))
        self.label_14.setText(_translate("MainWindow", "отступ z"))

        self.inp_offset_x.setText(_translate("MainWindow", "30"))
        self.inp_offset_y.setText(_translate("MainWindow", "20"))
        self.inp_offset_z.setText(_translate("MainWindow", "30"))

        self.inp_ruge_step.setText(_translate("MainWindow", "0.001"))
        self.inp_plot_step.setText(_translate("MainWindow", "0.1"))
        self.inp_min_t.setText(_translate("MainWindow", "-2.0"))
        self.inp_max_t.setText(_translate("MainWindow", "2.0"))

        self.inp_dxdt.setText(_translate("MainWindow", "-2 * x -2 * y"))
        self.inp_dydt.setText(_translate("MainWindow", "-1 * x + 2 * y"))
        self.inp_dzdt.setText(_translate("MainWindow", "5 * y + cos(z)"))

        self.inp_t0.setText(_translate("MainWindow", "0.0"))
        self.inp_x0.setText(_translate("MainWindow", "2.0"))
        self.inp_y0.setText(_translate("MainWindow", "7.0"))
        self.inp_z0.setText(_translate("MainWindow", "4.0"))

    def my_setup_ui(self):
        self.add_functions()
        self.radioButton_two_eq.setChecked(True)
        self.hide_z()

    def add_functions(self):
        self.btn_start.clicked.connect(lambda: self.start_portrait())
        self.btn_traject.clicked.connect(lambda: self.start_traject())
        self.radioButton_two_eq.toggled.connect(lambda: self.hide_z())
        self.radioButton_three_eq.toggled.connect(lambda: self.show_z())
        self.btn_exit.clicked.connect(lambda: exit())

    def example_2d(self):
        self.inp_ruge_step.setText("0.001")
        self.inp_plot_step.setText("0.1")
        self.inp_min_t.setText("-2.0")
        self.inp_max_t.setText("2.0")

        self.inp_dxdt.setText("-2 * x -2 * y")
        self.inp_dydt.setText("-1 * x + 2 * y")

        self.inp_t0.setText("0.0")
        self.inp_x0.setText("2.0")
        self.inp_y0.setText("7.0")

    def example_3d(self):
        self.inp_ruge_step.setText("0.001")
        self.inp_plot_step.setText("0.1")
        self.inp_min_t.setText("-3.0")
        self.inp_max_t.setText("3.0")

        self.inp_dxdt.setText("x - y**2 - z**2")
        self.inp_dydt.setText("-y")
        self.inp_dzdt.setText("-z")

        self.inp_t0.setText("0.0")
        self.inp_x0.setText("0.1")
        self.inp_y0.setText("0.1")
        self.inp_z0.setText("0.1")

    def hide_z(self):
        if self.radioButton_two_eq.isChecked():
            self.label_3.hide()
            self.inp_dzdt.hide()
            self.label_7.hide()
            self.inp_z0.hide()
            self.example_2d()

    def show_z(self):
        if self.radioButton_three_eq.isChecked():
            self.label_3.show()
            self.inp_dzdt.show()
            self.label_7.show()
            self.inp_z0.show()
            self.example_3d()

    def start_portrait(self):
        if self.radioButton_two_eq.isChecked():
            dxdt_str = self.inp_dxdt.text()
            dydt_str = self.inp_dydt.text()
            t0_str = self.inp_t0.text()
            x0_str = self.inp_x0.text()
            y0_str = self.inp_y0.text()
            runge_step_str = self.inp_ruge_step.text()
            plot_step_str = self.inp_plot_step.text()
            min_t_str = self.inp_min_t.text()
            max_t_str = self.inp_max_t.text()
            offset_x_str = self.inp_offset_x.text()
            offset_y_str = self.inp_offset_y.text()

            try:
                dx_expr = compile(dxdt_str, '', 'eval')
                dy_expr = compile(dydt_str, '', 'eval')
            except:
                QtWidgets.QMessageBox.about(
                    None, 'Ошибка', 'В системе уравнений')
                return

            try:
                t0 = float(t0_str)
                x0 = float(x0_str)
                y0 = float(y0_str)
                runge_step = float(runge_step_str)
                plot_step = float(plot_step_str)
                min_t = float(min_t_str)
                max_t = float(max_t_str)
                offset_x = float(offset_x_str)
                offset_y = float(offset_y_str)
            except:
                QtWidgets.QMessageBox.about(None, 'Ошибка', 'В числовых полях')
            try:
                phase_portrait_2d(offset_x, offset_y, x0, y0, t0,
                                runge_step, min_t, max_t, plot_step, dx_expr, dy_expr)
            except OverflowError as err:
                QtWidgets.QMessageBox.about(None, 'Ошибка', 'Получились огромные числа')

        if self.radioButton_three_eq.isChecked():
            dxdt_str = self.inp_dxdt.text()
            dydt_str = self.inp_dydt.text()
            dzdt_str = self.inp_dzdt.text()
            t0_str = self.inp_t0.text()
            x0_str = self.inp_x0.text()
            y0_str = self.inp_y0.text()
            z0_str = self.inp_z0.text()
            runge_step_str = self.inp_ruge_step.text()
            plot_step_str = self.inp_plot_step.text()
            min_t_str = self.inp_min_t.text()
            max_t_str = self.inp_max_t.text()
            offset_x_str = self.inp_offset_x.text()
            offset_y_str = self.inp_offset_y.text()
            offset_z_str = self.inp_offset_z.text()

            try:
                dx_expr = compile(dxdt_str, '', 'eval')
                dy_expr = compile(dydt_str, '', 'eval')
                dz_expr = compile(dzdt_str, '', 'eval')
            except:
                QtWidgets.QMessageBox.about(
                    None, 'Ошибка', 'В системе уравнений')
                return

            try:
                t0 = float(t0_str)
                x0 = float(x0_str)
                y0 = float(y0_str)
                z0 = float(z0_str)
                runge_step = float(runge_step_str)
                plot_step = float(plot_step_str)
                min_t = float(min_t_str)
                max_t = float(max_t_str)
                offset_x = float(offset_x_str)
                offset_y = float(offset_y_str)
                offset_z = float(offset_z_str)
            except:
                QtWidgets.QMessageBox.about(None, 'Ошибка', 'В числовых полях')
            try:
                phase_portrait_3d(offset_x, offset_y, offset_z, x0, y0, z0, t0,
                                runge_step, min_t, max_t, plot_step, dx_expr, dy_expr, dz_expr)
            except OverflowError as err:
                QtWidgets.QMessageBox.about(None, 'Ошибка', 'Получились огромные числа')

    def start_traject(self):
        if self.radioButton_two_eq.isChecked():
            dxdt_str = self.inp_dxdt.text()
            dydt_str = self.inp_dydt.text()
            t0_str = self.inp_t0.text()
            x0_str = self.inp_x0.text()
            y0_str = self.inp_y0.text()
            runge_step_str = self.inp_ruge_step.text()
            plot_step_str = self.inp_plot_step.text()
            min_t_str = self.inp_min_t.text()
            max_t_str = self.inp_max_t.text()

            try:
                dx_expr = compile(dxdt_str, '', 'eval')
                dy_expr = compile(dydt_str, '', 'eval')
            except:
                QtWidgets.QMessageBox.about(
                    None, 'Ошибка', 'В системе уравнений')
                return

            try:
                t0 = float(t0_str)
                x0 = float(x0_str)
                y0 = float(y0_str)
                runge_step = float(runge_step_str)
                plot_step = float(plot_step_str)
                min_t = float(min_t_str)
                max_t = float(max_t_str)
            except:
                QtWidgets.QMessageBox.about(None, 'Ошибка', 'В числовых полях')

            fig = plt.figure(1)
            ax = fig.add_subplot(1, 1, 1)
            ax.grid(True, which='both')
            ax.set_ylim(-100, 100)
            ax.set_xlim(-100, 100)
            ax.spines['left'].set_position('center')
            ax.spines['bottom'].set_position('center')
            ax.spines['top'].set_visible(False)
            ax.spines['right'].set_visible(False)
            try:
                phase_trajectory_2d(x0, y0, t0, runge_step, min_t,
                                    max_t, plot_step, dx_expr, dy_expr, ax)
                plt.show()
            except OverflowError as err:
                QtWidgets.QMessageBox.about(None, 'Ошибка', 'Получились огромные числа')

        if self.radioButton_three_eq.isChecked():
            dxdt_str = self.inp_dxdt.text()
            dydt_str = self.inp_dydt.text()
            dzdt_str = self.inp_dzdt.text()
            t0_str = self.inp_t0.text()
            x0_str = self.inp_x0.text()
            y0_str = self.inp_y0.text()
            z0_str = self.inp_z0.text()
            runge_step_str = self.inp_ruge_step.text()
            plot_step_str = self.inp_plot_step.text()
            min_t_str = self.inp_min_t.text()
            max_t_str = self.inp_max_t.text()

            try:
                dx_expr = compile(dxdt_str, '', 'eval')
                dy_expr = compile(dydt_str, '', 'eval')
                dz_expr = compile(dzdt_str, '', 'eval')
            except:
                QtWidgets.QMessageBox.about(
                    None, 'Ошибка', 'В системе уравнений')
                return

            try:
                t0 = float(t0_str)
                x0 = float(x0_str)
                y0 = float(y0_str)
                z0 = float(z0_str)
                runge_step = float(runge_step_str)
                plot_step = float(plot_step_str)
                min_t = float(min_t_str)
                max_t = float(max_t_str)
            except:
                QtWidgets.QMessageBox.about(None, 'Ошибка', 'В числовых полях')

            fig = plt.figure()
            ax = fig.add_subplot(111, projection='3d')
            try:
                phase_trajectory_3d(x0, y0, z0, t0, runge_step, min_t,
                                    max_t, plot_step, dx_expr, dy_expr, dz_expr, ax)
                plt.show()
            except OverflowError as err:
                QtWidgets.QMessageBox.about(None, 'Ошибка', 'Получились огромные числа')


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    ui.my_setup_ui()
    MainWindow.show()
    sys.exit(app.exec_())
